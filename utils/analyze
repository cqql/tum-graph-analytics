#!/usr/bin/env python

import argparse
import concurrent.futures
import math
import multiprocessing
import os

import numpy as np

import matrix


def sgn(num):
    """Sign operation."""
    return math.copysign(1.0, num)


def split(lst, nchunks):
    # Average number of items per chunk
    n = int(math.floor(len(lst) / nchunks))

    chunks = []

    for i in range(nchunks - 1):
        chunks.append(lst[i * n:(i + 1) * n])

    # Finally all remaining ones (There may be some left over if the number of
    # chunks does not evenly divide the number of items)
    chunks.append(lst[(nchunks - 1) * n:])

    return chunks


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t",
                        "--tolerance",
                        type=float,
                        default=0.5,
                        help="Tolerance for correct prediction")
    parser.add_argument(
        "-d",
        "--data",
        help="Directory with preprocessed data and factorizations")
    parser.add_argument("-m",
                        "--mode",
                        choices=["train", "test"],
                        default="test")
    parser.add_argument("--beta",
                        default=0.4,
                        type=float,
                        help="beta for time deviations")

    args = parser.parse_args()
    tolerance = args.tolerance
    data = args.data
    mode = args.mode
    beta = args.beta

    Rpath = os.path.join(data, mode)
    Tpath = os.path.join(data, mode + "-time")
    Qpath = os.path.join(data, "Q")
    Ppath = os.path.join(data, "P")
    Ypath = os.path.join(data, "Y")
    mupath = os.path.join(data, "mu")
    bipath = os.path.join(data, "bi")
    bupath = os.path.join(data, "bu")
    alphapath = os.path.join(data, "alpha")
    kappapath = os.path.join(data, "kappa")

    # Ratings matrix
    R = matrix.loadfile(Rpath)

    # Rating times matrix
    T = matrix.loadfile(Tpath)

    # Item factors
    Q = np.loadtxt(Qpath, delimiter=",", ndmin=2)

    # User factors
    P = np.loadtxt(Ppath, delimiter=",", ndmin=2)

    # Implicit feedback factors
    Y = np.loadtxt(Ypath, delimiter=",", ndmin=2)

    # Overall mean
    if os.path.isfile(mupath):
        mu = np.loadtxt(mupath, delimiter=",", ndmin=1)[0]
    else:
        mu = 0.0

    # Item biases
    if os.path.isfile(bipath):
        bi = np.loadtxt(bipath, delimiter=",")
    else:
        bi = np.zeros((Q.shape[1], ))

    # Item bias trend slopes
    if os.path.isfile(kappapath):
        kappa = np.loadtxt(kappapath, delimiter=",")
    else:
        kappa = np.zeros((Q.shape[1]))

    # User biases
    if os.path.isfile(bupath):
        bu = np.loadtxt(bupath, delimiter=",")
    else:
        bu = np.zeros((P.shape[1], ))

    # User bias trend slopes
    if os.path.isfile(alphapath):
        alpha = np.loadtxt(alphapath, delimiter=",")
    else:
        alpha = np.zeros((P.shape[1]))

    colnnz = R.getnnz(axis=0)
    rownnz = R.getnnz(axis=1)

    # Number of ratings per user
    Ru = R.getnnz(axis=0)

    # Mean rating date per user
    Tu = np.true_divide(T.sum(axis=0), T.getnnz(axis=0))

    # Mean rating date per item
    Ti = np.true_divide(T.sum(axis=1).T, T.getnnz(axis=1).T)

    # Transform 1xN matrices into vectors
    Tu = np.asarray(Tu).squeeze()
    Ti = np.asarray(Ti).squeeze()

    def process(chunk):
        mse = 0
        correct = 0

        for k in chunk:
            i, u = R.row[k], R.col[k]
            t = T.data[k]
            expected = R.data[k]

            Ys = np.sum(Y[:, R.row[R.col == u]], axis=1)
            biases = mu + bi[i] + bu[u]
            utimedev = t - Tu[u]
            itimedev = t - Ti[i]
            tempdyn = alpha[u] * sgn(utimedev) * (
                abs(utimedev)**beta) + kappa[i] * sgn(itimedev) * (
                    abs(itimedev)**beta)
            interactions = Q[:, i].dot(P[:, u] + (1 / math.sqrt(abs(Ru[u]))) *
                                       Ys)
            actual = biases + tempdyn + interactions

            error = abs(expected - actual)
            mse += error * error

            if error <= tolerance:
                correct += 1

        return (mse, correct)

    ncpus = multiprocessing.cpu_count()
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=ncpus)

    chunks = split(range(R.nnz), ncpus)
    futures = [executor.submit(process, c) for c in chunks]
    results = [f.result() for f in futures]

    mse = sum([r[0] for r in results])
    correct = sum([r[1] for r in results])

    print("MSE = {}".format(mse / R.nnz))
    print("Correct {}; Incorrect {}; Recall/Accuracy {:.3f}".format(
        correct, R.nnz - correct, correct / R.nnz))


if __name__ == "__main__":
    main()
