#!/usr/bin/env python

import argparse
import math
import os
import random

import numpy as np

import matrix
import reviews
import scipy.sparse


def train_test_split(R, T, testprop):
    """Split sparse matrix `R` into a training and a test part.

    The algorithm only selects entries for testing that have at least one other
    nonzero entry in their row as well as in their column. Otherwise if it would
    for example select a rating from a user that only has a single rating, there
    would be no data left to train on.

    Parameters
    ----------
    R : scipy.sparse.coo_matrix
        Sparse matrix to split
    T : scipy.sparse.coo_matrix
        Same matrix as R with different values
    testprop : float
        Proportion of nonzero entries to split off for testing

    Returns
    -------
    Rtrain : scipy.sparse.coo_matrix
        Training part
    Rtest : scipy.sparse.coo_matrix
        Testing part
    Ttrain : scipy.sparse.coo_matrix
        Training part
    Ttest : scipy.sparse.coo_matrix
        Testing part
    """
    # Clamp to [0, 1]
    testprop = max(0, min(1, testprop))

    colnnz = R.getnnz(axis=0)
    rownnz = R.getnnz(axis=1)

    train = []
    test = []
    testoptions = []

    for k in list(range(R.nnz)):
        i, j = R.row[k], R.col[k]

        if rownnz[i] <= 1 or colnnz[j] <= 1:
            train.append(k)
        else:
            testoptions.append(k)

    random.shuffle(testoptions)

    testn = int(R.nnz * testprop)
    while len(test) < testn:
        if len(testoptions) == 0:
            raise Exception("Could not select {} test entries".format(testn))

        k = testoptions.pop()
        i, j = R.row[k], R.col[k]

        if rownnz[i] > 1 and colnnz[j] > 1:
            rownnz[i] -= 1
            colnnz[j] -= 1

            test.append(k)
        else:
            train.append(k)

    # Put the rest into the training set
    train += testoptions

    # Split R and T accordingly
    Rtrain = scipy.sparse.coo_matrix(
        (R.data[train], (R.row[train], R.col[train])),
        shape=R.shape)
    Rtest = scipy.sparse.coo_matrix(
        (R.data[test], (R.row[test], R.col[test])),
        shape=R.shape)
    Ttrain = scipy.sparse.coo_matrix(
        (T.data[train], (T.row[train], T.col[train])),
        shape=T.shape)
    Ttest = scipy.sparse.coo_matrix(
        (T.data[test], (T.row[test], T.col[test])),
        shape=T.shape)

    return Rtrain, Rtest, Ttrain, Ttest


def kway_split(R, T, k):
    """k-way split a matrix along the first dimension.

    This implementation tries to split in such a way that the number of nonzero
    entries is as balanced as possible to facilitate load balancing between the
    workers.

    Parameters
    ----------
    R : scipy.sparse.coo_matrix
        Sparse matrix to split
    T : scipy.sparse.coo_matrix
        Same as R with different values
    k : int
        Number of splits

    Returns
    -------
    list of tuples
        Each tuple has first the offset along the first axis and then the split
        part of R, followed by the split part of T
    """
    # Convert to CSR format for slicing
    #
    # CSR was chosen over CSV because it is best suited for selecting rows and
    # slicing along rows.
    R = R.tocsr()
    T = T.tocsr()
    rownnz = R.getnnz(axis=1)

    # Expected number of nonzero entries per split
    n = R.nnz / k

    splits = []

    while len(splits) != k:
        # Add rows to the current split until each split has at least n (besides
        # possibly the last)
        split = []
        offset = 0
        N = 0
        i = 0
        while i < R.shape[0]:
            if N < n:
                split.append(i)
                N += rownnz[i]
                i += 1
            elif len(splits) < k - 1:
                splits.append((offset, split))
                offset = i
                N = 0
                split = []

        # Append the last split
        splits.append((offset, split))

        # If matrix could not be split evenly
        if len(splits) < k:
            # Reduce n
            n *= 0.9

            splits = []

    # Select rows
    splits = [(ofs, R[split, :], T[split, :]) for ofs, split in splits]

    # Convert the splits back to COO
    splits = [(ofs, Rs.tocoo(), Ts.tocoo()) for ofs, Rs, Ts in splits]

    return splits


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v",
                        "--verbose",
                        default=False,
                        action="store_true",
                        help="Be verbose")
    parser.add_argument("-t", type=float, default=0.2, help="Test size")
    parser.add_argument("k", type=int, help="Split k-ways")
    parser.add_argument("data", help="Review data file")
    parser.add_argument("out", help="Output directory")

    args = parser.parse_args()

    if os.path.exists(args.out):
        parser.error("Output directory does already exist")

    products, users, R, T = reviews.parse(args.data)
    Rtrain, Rtest, Ttrain, Ttest = train_test_split(R, T, args.t)
    prodsplits = kway_split(Rtrain, Ttrain, args.k)
    usersplits = kway_split(
        Rtrain.transpose(True), Ttrain.transpose(True), args.k)

    # Transpose user splits back
    usersplits = [(ofs, Rs.transpose(), Ts.transpose())
                  for ofs, Rs, Ts in usersplits]

    if args.verbose:
        print("Splits by product")
        for i in range(args.k):
            P = prodsplits[i][1]

            print("{}x{} (nnz={})".format(*P.shape, P.nnz))

        print()
        print("Splits by user")
        for i in range(args.k):
            U = usersplits[i][1]

            print("{}x{} (nnz={})".format(*U.shape, U.nnz))

    os.makedirs(args.out)
    np.savetxt(os.path.join(args.out, "users"), users, fmt="%s")
    np.savetxt(os.path.join(args.out, "products"), products, fmt="%s")

    for i in range(args.k):
        ppath = os.path.join(args.out, "rank-{}-prod".format(i))
        matrix.savesplit(ppath, prodsplits[i][0], prodsplits[i][1])

        ptpath = os.path.join(args.out, "rank-{}-prod-time".format(i))
        matrix.savesplit(ptpath, prodsplits[i][0], prodsplits[i][2])

        upath = os.path.join(args.out, "rank-{}-user".format(i))
        matrix.savesplit(upath, usersplits[i][0], usersplits[i][1])

        utpath = os.path.join(args.out, "rank-{}-user-time".format(i))
        matrix.savesplit(utpath, usersplits[i][0], usersplits[i][2])

    with open(os.path.join(args.out, "train"), "wb") as f:
        matrix.save(f, Rtrain)

    with open(os.path.join(args.out, "train-time"), "wb") as f:
        matrix.save(f, Ttrain)

    with open(os.path.join(args.out, "test"), "wb") as f:
        matrix.save(f, Rtest)

    with open(os.path.join(args.out, "test-time"), "wb") as f:
        matrix.save(f, Ttest)


if __name__ == "__main__":
    main()
